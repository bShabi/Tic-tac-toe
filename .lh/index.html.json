{
    "sourceFile": "index.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732966275793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732966275793,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Tic-tac-toe vs AI</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        :root {\n            --primary-color: #6366f1;\n            --primary-hover: #4f46e5;\n            --bg-color: #f8fafc;\n            --cell-bg: #ffffff;\n            --border-color: #e2e8f0;\n            --text-color: #1e293b;\n        }\n\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: 'Inter', -apple-system, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.5;\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 1rem;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 450px;\n            background: white;\n            padding: 2rem;\n            border-radius: 1rem;\n            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n        }\n\n        h1 {\n            font-size: 1.875rem;\n            font-weight: 700;\n            text-align: center;\n            margin-bottom: 1.5rem;\n            color: var(--text-color);\n        }\n\n        .score {\n            display: flex;\n            justify-content: center;\n            gap: 2rem;\n            margin-bottom: 1rem;\n            font-size: 1.25rem;\n        }\n\n        #gameBoard {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 0.75rem;\n            margin: 1.5rem auto;\n            max-width: 350px;\n        }\n\n        .cell {\n            aspect-ratio: 1;\n            width: 100%;\n            background: var(--cell-bg);\n            border: 2px solid var(--border-color);\n            border-radius: 0.75rem;\n            font-size: 2rem;\n            font-weight: 700;\n            color: var(--primary-color);\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n\n        .cell:hover:not(:disabled) {\n            background: #f1f5f9;\n            transform: scale(1.02);\n        }\n\n        .cell:disabled {\n            cursor: not-allowed;\n            opacity: 0.7;\n        }\n\n        #status {\n            text-align: center;\n            font-weight: 600;\n            min-height: 1.5rem;\n            margin: 1rem 0;\n            color: var(--primary-color);\n        }\n\n        .animate-pop {\n            animation: pop 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n        }\n\n        @keyframes pop {\n            0% { transform: scale(0.8); opacity: 0; }\n            100% { transform: scale(1); opacity: 1; }\n        }\n\n        .controls {\n            display: flex;\n            gap: 1rem;\n            margin-top: 1rem;\n        }\n\n        button {\n            padding: 0.75rem 1.5rem;\n            border: none;\n            border-radius: 0.5rem;\n            background: var(--primary-color);\n            color: white;\n            font-weight: 600;\n            font-size: 1rem;\n            cursor: pointer;\n            transition: background-color 0.2s, transform 0.1s;\n            width: 100%;\n        }\n\n        button:hover {\n            background: var(--primary-hover);\n        }\n\n        button:active {\n            transform: translateY(1px);\n        }\n\n        @media (max-width: 480px) {\n            .container {\n                padding: 1.5rem;\n            }\n\n            h1 {\n                font-size: 1.5rem;\n            }\n\n            .cell {\n                font-size: 1.75rem;\n            }\n\n            button {\n                padding: 0.75rem 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Tic-tac-toe vs AI</h1>\n        \n        <div class=\"score\">\n            <span>You: <span id=\"playerScore\">0</span></span>\n            <span>AI: <span id=\"aiScore\">0</span></span>\n        </div>\n\n        <div id=\"status\">Your turn! (X)</div>\n\n        <div id=\"gameBoard\">\n            <button class=\"cell\" onclick=\"makeMove(0)\"></button>\n            <button class=\"cell\" onclick=\"makeMove(1)\"></button>\n            <button class=\"cell\" onclick=\"makeMove(2)\"></button>\n            <button class=\"cell\" onclick=\"makeMove(3)\"></button>\n            <button class=\"cell\" onclick=\"makeMove(4)\"></button>\n            <button class=\"cell\" onclick=\"makeMove(5)\"></button>\n            <button class=\"cell\" onclick=\"makeMove(6)\"></button>\n            <button class=\"cell\" onclick=\"makeMove(7)\"></button>\n            <button class=\"cell\" onclick=\"makeMove(8)\"></button>\n        </div>\n\n        <div class=\"controls\">\n            <button onclick=\"resetGame()\">New Game</button>\n            <button onclick=\"resetScore()\">Reset Score</button>\n        </div>\n    </div>\n\n    <script>\n        let board = Array(9).fill('');\n        let gameActive = true;\n        let playerScore = 0;\n        let aiScore = 0;\n\n        function makeMove(cellIndex) {\n            if (!gameActive || board[cellIndex] !== '') return;\n\n            // Player move\n            board[cellIndex] = 'X';\n            updateCell(cellIndex, 'X');\n            \n            if (checkWinner() || board.every(cell => cell !== '')) {\n                endGame();\n                return;\n            }\n\n            // AI move\n            gameActive = false;\n            document.getElementById('status').textContent = \"AI is thinking...\";\n            \n            setTimeout(() => {\n                makeAIMove();\n                gameActive = true;\n                \n                if (checkWinner() || board.every(cell => cell !== '')) {\n                    endGame();\n                } else {\n                    document.getElementById('status').textContent = \"Your turn! (X)\";\n                }\n            }, 500);\n        }\n\n        function makeAIMove() {\n            // Try to win\n            const winMove = findBestMove('O');\n            if (winMove !== -1) {\n                board[winMove] = 'O';\n                updateCell(winMove, 'O');\n                return;\n            }\n\n            // Block player from winning\n            const blockMove = findBestMove('X');\n            if (blockMove !== -1) {\n                board[blockMove] = 'O';\n                updateCell(blockMove, 'O');\n                return;\n            }\n\n            // Take center if available\n            if (board[4] === '') {\n                board[4] = 'O';\n                updateCell(4, 'O');\n                return;\n            }\n\n            // Take any available corner\n            const corners = [0, 2, 6, 8];\n            const availableCorners = corners.filter(i => board[i] === '');\n            if (availableCorners.length > 0) {\n                const move = availableCorners[Math.floor(Math.random() * availableCorners.length)];\n                board[move] = 'O';\n                updateCell(move, 'O');\n                return;\n            }\n\n            // Take any available side\n            const sides = [1, 3, 5, 7];\n            const availableSides = sides.filter(i => board[i] === '');\n            if (availableSides.length > 0) {\n                const move = availableSides[Math.floor(Math.random() * availableSides.length)];\n                board[move] = 'O';\n                updateCell(move, 'O');\n            }\n        }\n\n        function findBestMove(player) {\n            const winPatterns = [\n                [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n                [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n                [0, 4, 8], [2, 4, 6] // Diagonals\n            ];\n\n            for (let pattern of winPatterns) {\n                const [a, b, c] = pattern;\n                if (board[a] === player && board[b] === player && board[c] === '') return c;\n                if (board[a] === player && board[c] === player && board[b] === '') return b;\n                if (board[b] === player && board[c] === player && board[a] === '') return a;\n            }\n            return -1;\n        }\n\n        function updateCell(index, mark) {\n            const cell = document.getElementsByClassName('cell')[index];\n            cell.textContent = mark;\n            cell.disabled = true;\n            addPopAnimation(cell);\n        }\n\n        function checkWinner() {\n            const winPatterns = [\n                [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n                [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n                [0, 4, 8], [2, 4, 6] // Diagonals\n            ];\n\n            for (let pattern of winPatterns) {\n                const [a, b, c] = pattern;\n                if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n                    return board[a];\n                }\n            }\n            return null;\n        }\n\n        function endGame() {\n            const winner = checkWinner();\n            if (winner) {\n                if (winner === 'X') {\n                    playerScore++;\n                    document.getElementById('status').textContent = \"You won! 🎉\";\n                } else {\n                    aiScore++;\n                    document.getElementById('status').textContent = \"AI won! 😔\";\n                }\n            } else {\n                document.getElementById('status').textContent = \"It's a draw! 🤝\";\n            }\n            \n            document.getElementById('playerScore').textContent = playerScore;\n            document.getElementById('aiScore').textContent = aiScore;\n            gameActive = false;\n        }\n\n        function resetGame() {\n            board = Array(9).fill('');\n            gameActive = true;\n            document.getElementById('status').textContent = \"Your turn! (X)\";\n            \n            const cells = document.getElementsByClassName('cell');\n            for (let cell of cells) {\n                cell.textContent = '';\n                cell.disabled = false;\n            }\n        }\n\n        function resetScore() {\n            playerScore = 0;\n            aiScore = 0;\n            document.getElementById('playerScore').textContent = '0';\n            document.getElementById('aiScore').textContent = '0';\n            resetGame();\n        }\n\n        function addPopAnimation(element) {\n            element.classList.add('animate-pop');\n            element.addEventListener('animationend', () => {\n                element.classList.remove('animate-pop');\n            }, { once: true });\n        }\n    </script>\n</body>\n</html>"
        }
    ]
}
{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732965924684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732965924684,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst app = express();\nconst http = require('http').createServer(app);\nconst io = require('socket.io')(http);\nconst path = require('path');\n\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Game state storage\nconst games = new Map();\n\nfunction generateGameCode() {\n    return Math.random().toString(36).substring(2, 8).toUpperCase();\n}\n\nfunction checkWinner(board) {\n    const winPatterns = [\n        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n        [0, 4, 8], [2, 4, 6] // Diagonals\n    ];\n\n    for (let pattern of winPatterns) {\n        const [a, b, c] = pattern;\n        if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n            return board[a];\n        }\n    }\n\n    if (board.every(cell => cell !== '')) return 'draw';\n    return null;\n}\n\nio.on('connection', (socket) => {\n    socket.on('createGame', () => {\n        const gameCode = generateGameCode();\n        games.set(gameCode, {\n            board: Array(9).fill(''),\n            players: [socket.id],\n            currentPlayer: 'X'\n        });\n        socket.join(gameCode);\n        socket.emit('gameCreated', gameCode);\n    });\n\n    socket.on('joinGame', (gameCode) => {\n        const game = games.get(gameCode);\n        if (!game) {\n            socket.emit('error', 'Game not found');\n            return;\n        }\n        if (game.players.length >= 2) {\n            socket.emit('error', 'Game is full');\n            return;\n        }\n\n        game.players.push(socket.id);\n        socket.join(gameCode);\n        \n        // Notify both players\n        socket.emit('gameJoined', { mark: 'O' });\n        io.to(game.players[0]).emit('gameJoined', { mark: 'X' });\n        \n        // Initial board state\n        io.to(gameCode).emit('updateGame', {\n            board: game.board,\n            currentPlayer: game.currentPlayer\n        });\n    });\n\n// In your server.js\nsocket.on('makeMove', ({ cellIndex, gameCode }) => {\n    const game = games.get(gameCode);\n    if (!game) {\n        socket.emit('error', 'Game not found');\n        return;\n    }\n\n    const playerIndex = game.players.indexOf(socket.id);\n    if (playerIndex === -1) {\n        socket.emit('error', 'Player not in game');\n        return;\n    }\n\n    const playerMark = playerIndex === 0 ? 'X' : 'O';\n\n    // Validate turn\n    if (game.currentPlayer !== playerMark || game.board[cellIndex] !== '') {\n        socket.emit('error', 'Invalid move');\n        return;\n    }\n\n    // Make move\n    game.board[cellIndex] = playerMark;\n    \n    // Switch turns\n    game.currentPlayer = game.currentPlayer === 'X' ? 'O' : 'X';\n\n    // Broadcast updated game state\n    io.to(gameCode).emit('updateGame', {\n        board: game.board,\n        currentPlayer: game.currentPlayer\n    });\n\n    // Check for winner\n    const winner = checkWinner(game.board);\n    if (winner) {\n        io.to(gameCode).emit('gameOver', {\n            board: game.board,\n            winner: winner === 'draw' ? null : winner\n        });\n        games.delete(gameCode);\n    }\n});\n\n    socket.on('disconnect', () => {\n        // Clean up any games where this player was participating\n        for (const [gameCode, game] of games.entries()) {\n            if (game.players.includes(socket.id)) {\n                io.to(gameCode).emit('error', 'Opponent disconnected');\n                games.delete(gameCode);\n            }\n        }\n    });\n});\n\nconst PORT = process.env.PORT || 3000;\nhttp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});"
        }
    ]
}